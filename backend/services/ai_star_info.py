import openai
from backend.config.settings import settings
from backend.services.simbad_api import fetch_star_data

openai.api_key = settings.OPENAI_API_KEY


async def analyze_star_mythology(star_name: str):
    """
    Uses GPT-4 to analyze the mythology of a star and enrich it with real NASA data.
    """

    star_data = await fetch_star_data(star_name)

    if not star_data:
        return {"error": "Star data not found in SIMBAD API."}

    prompt = f"""
    You are an expert in astronomy, mythology, and poetic writing. Your task is to create a concise yet poetic 
    and emotionally profound description of the star "{star_name}," 
    analyzing its historical and mythological significance.

         **Structure of the response:**
        - **Mythological meaning**: How different cultures viewed this star (Greek, Babylonian, Egyptian, etc.).
        - **Emotional and symbolic representation**: What human emotions, strengths,
         or challenges does this star symbolize?
        - **If the star were a person**: What kind of personality or presence would it have?

         **Style Guidelines:**
        - Balance logic and artistic expression (max 3-4 sentences per section).
        - Avoid overly poetic phrasing, but make it engaging.
        - Keep the text concise and meaningful.
        - Do NOT create fake scientific factsâ€”use only the provided data.

    """

    client = openai.AsyncOpenAI(api_key=settings.OPENAI_API_KEY)
    response = await client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=250,
        temperature=0.6,
        top_p=0.9,
        frequency_penalty=0.2,
        presence_penalty=0.3
    )

    mythology_description = response.choices[0].message.content.strip()

    # Combine real NASA data with AI-generated mythology
    enriched_star_info = {
        **star_data,  # Includes temperature, spectral type, etc.
        "mythology": mythology_description,  # Mythological description generated by AI
    }

    return enriched_star_info
