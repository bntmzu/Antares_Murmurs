from fastapi import APIRouter, HTTPException
from backend.services.simbad_api import fetch_star_data
from backend.services.ai_star_info import analyze_star_mythology
import logging

logging.basicConfig(level=logging.DEBUG)
logging.info("‚ÑπÔ∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")

router = APIRouter()

@router.get("/star_info/")
async def get_star_info(star_name: str):
    """
    API endpoint to fetch real astronomical data and AI-generated mythology for a given star.
    """
    print("üî• API –≤—ã–∑–≤–∞–Ω!")
    print(f"üöÄ API –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: {star_name}")  # –î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
    logging.info(f"üü° API called with star_name: {star_name}")

    try:
        # 1Ô∏è‚É£ Fetch real star data from SIMBAD
        star_data = await fetch_star_data(star_name)

        if not star_data:
            raise HTTPException(status_code=404, detail="Star data not found.")

        # 2Ô∏è‚É£ Use GPT-4 to analyze mythology
        mythology_description = await analyze_star_mythology(star_name)

        # 3Ô∏è‚É£ Merge real data with AI-generated mythology
        enriched_star_info = {**star_data, "mythology": mythology_description}

        return enriched_star_info

    except Exception as e:
        logging.error(f"‚ùå API Error: {e}")
        raise HTTPException(status_code=500, detail=str(e))
